<!doctype html>
<html lang="en" dir="ltr">
<head>
<meta charset="utf-8">
<!--
   +MMMMMM.     MMMMM7    MMMMMMMMMMM.    MMMMMM7     MMMMM  MMMMM. .MMMMMMMMMMMMMMM    MMMMMMMMMMMMMMM
    MMMMMMM.  .MMMMMM   MMMMMMMMMMMMMM8   MMMMMM7     MMMMM  MMMMM   MMMMMMMMMMMMMMMMM  MMMMMMMMMMMMMMM
     MMMMMMM  MMMMM?   MMMMMMMM7MMMMMMMM. MMMMMM7     MMMMM  MMMMM.  MMMMMM7778MMMMMMM= MMMMMMMMMMMMMMM
      MMMMMMMMMMMMM.  :MMMMMM7   .MMMMMM. MMMMMM7     MMMMM   .MM,   MMMMMM.   .MMMMMMM MMMMMM
       MMMMMMMMMMM    MMMMMMM     MMMMMMM MMMMMM7     MMMMM   MM,    MMMMMM.  ..MMMMMMO MMMMMM
        MMMMMMMMM     MMMMMMO     MMMMMMM MMMMMM7     MMMMM          MMMMMMMMMMMMMMMMM  MMMMMMMMMMMMM
         MMMMMMM.     MMMMMM$     NMMMMMM MMMMMM7     MMMMM          MMMMMMMMMMMMMMMD   MMMMMMMMMMMMM
         =MMMMMI     .MMMMMMM.    MMMMMMM MMMMMM7     MMMMM          MMMMMMMMMMMMMMI    MMMMMM
         =MMMMM7      DMMMMMM     MMMMMM$ MMMMMM8    .MMMMM          MMMMMM. ZMMMMMM    MMMMMM
         =MMMMM7      .MMMMMMM . MMMMMMM  MMMMMMMM .ZMMMMM7          MMMMMM...MMMMMMM   MMMMMMMMMMMMMMM
         =MMMMM7        MMMMMMMMMMMMMMM.  .MMMMMMMMMMMMMMM           MMMMMM.  .MMMMMMI  MMMMMMMMMMMMMMM
         =MMMMM7         8MMMMMMMMMMMZ.     MMMMMMMMMMMMM            MMMMMM.  .MMMMMMM  MMMMMMMMMMMMMMM
         =MMMMM7            $MMMMM?            NMMMMMM.              MMMMMM     MMMMMMM MMMMMMMMMMMMMMM


       .=MMMMMMM.     OMMMMMM    .MMMMM       MMMMMMM       MMMMMM    ~MMMMMM
      MMMMMMMMMMMMM.  8MMMMMM     MMMMM    8MMMMMMMMMMM$    MMMMMM    =MMMMMM
     MMMMMMMMMMMMMMM. 8MMMMMM     MMMMM   MMMMMMMMMMMMMMM   MMMMMM    =MMMMMM
   .MMMMMM,  .?MMMMD. 8MMMMMM     MMMMM .MMMMMMM. .MMMMMM.  MMMMMM    =MMMMMM
   .MMMMMMM.          8MMMMMM     MMMMM  MMMMMM.   .MMMMMM. MMMMMM    =MMMMMM
    NMMMMMMMMMMMM~..  8MMMMMM     MMMMM :MMMMMM.            MMMMMMMMMMMMMMMMM
    .MMMMMMMMMMMMMMM  8MMMMMM     MMMMM 8MMMMMM             MMMMMMMMMMMMMMMMM
       MMMMMMMMMMMMMD 8MMMMMM     MMMMM 8MMMMMM             MMMMMMMMMMMMMMMMM
           ,MMMMMMMMM 8MMMMMM     MMMMM  MMMMMM.    MMMMMZ  MMMMMM    =MMMMMM
   MMMMMM.     MMMMMM 8MMMMMM     MMMMM .MMMMMM,    MMMMMM. MMMMMM    =MMMMMM
    MMMMMMMMMMMMMMMMM  MMMMMMMMMMMMMMM8   MMMMMMMMMMMMMMM   MMMMMM    =MMMMMM
    .MMMMMMMMMMMMMMM   $MMMMMMMMMMMMMM     MMMMMMMMMMMMM.   MMMMMM    =MMMMMM
      OMMMMMMMMMMM.      MMMMMMMMMMM.       8MMMMMMMMMZ     MMMMMM    ~MMMMMM


         MMMMMMM.
        ?MMMMMMM:
        MMMMMMMMM
       :MMMMMMMMM.
       MMMMMMMMMMM.
      ,MMMM  MMMMM.
      MMMMM  MMMMMM
     ,MMMMI77DMMMMM.
     MMMMMMMMMMMMMMM
    .MMMMMMMMMMMMMMM.
    MMMMM     .MMMMMM
   .MMMMM      MMMMMM.
   MMMMM.      OMMMMMM


   7MMMMMM      MMMMM  MMMMMMMMMMMMMMM  MMMMMMMMMMMMMMM    MMMMMMMMMMMM8.
   7MMMMMMM     MMMMM  MMMMMMMMMMMMMMM  MMMMMMMMMMMMMMMMO. MMMMMMMMMMMMMMM
   7MMMMMMMM.   MMMMM  MMMMMMMMMMMMMMM  MMMMMM777MMMMMMMM. MMMMMMMMMMMMMMMM
   7MMMMMMMMM.  MMMMM  MMMMMM           MMMMMM    .MMMMMM= MMMMMM    MMMMMMM.
   7MMMMMMMMMM  MMMMM  MMMMMM           MMMMMM.  ..MMMMMM  MMMMMM     MMMMMM.
   7MMMM MMMMMM.MMMMM  MMMMMMMMMMMMM    MMMMMMMMMMMMMMMMM. MMMMMM     MMMMMMI
   7MMMMI MMMMMNMMMMM  MMMMMMMMMMMMM    MMMMMMMMMMMMMMM~   MMMMMM     MMMMMMZ
   7MMMM7  MMMMMMMMMM  MMMMMM           MMMMMMMMMMMMMM     MMMMMM     MMMMMM
   7MMMM7  =MMMMMMMMM  MMMMMM           MMMMMM  MMMMMMM.   MMMMMM   .MMMMMMM
   7MMMM7   +MMMMMMMM  MMMMMM           MMMMMM   MMMMMMO   MMMMMM...MMMMMMM.
   7MMMM7    ?MMMMMMM  MMMMMMMMMMMMMMM  MMMMMM  .DMMMMMM.  MMMMMMMMMMMMMMM.
   7MMMM7    .IMMMMMM  MMMMMMMMMMMMMMM  MMMMMM    MMMMMMM  MMMMMMMMMMMMMN
   7MMMM7      $MMMMM  MMMMMMMMMMMMMMM..MMMMMM    .MMMMMM$ MMMMMMMMMI

-->
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<title>  should statics be removed from php? - greg&#039;s weblog</title>
<meta name="robots" content="all">
<meta name="author" content="Greg Knapp">
<meta name="description" content="Greg's web log about software development, operating systems and other geeky topics">
<meta name="viewport" content="width=1024px">
<link rel="me" type="text/html" href="http://www.google.com/profiles/virtual.greg">
<link rel="stylesheet" type="text/css" media="screen" href="http://static.gregk.me/css/style.min.130721.css">
<!--[if lt IE 7]>
<link rel="stylesheet" type="text/css" media="screen" href="http://static.gregk.me/css/ie6.css">
<![endif]-->
<!--[if IE]>
<style type="text/css" media="screen">
.post div.content, .post div.comments {
	display: inline-block;
}

#query {
    line-height: 1.6;
}
</style>
<![endif]-->

<script type='text/javascript' src='http://archive.gregk.me/wp-includes/js/comment-reply.min.js?ver=3.8.3'></script>

<link rel='prev' title='PHP UK Conference 2012' href='/2012/php-uk-conference-2012' />
<link rel='next' title='Migrating from iOS to Android' href='/2012/migrating-from-ios-to-android' />

<link rel='canonical' href='/2012/should-static-methods-be-removed-from-php' />
<link rel='shortlink' href='/2012/should-static-methods-be-removed-from-php' />
</head>
<body>
<div id="container_header">
  <div id="header">
    <div class="title"><a href="/">greg&#039;s weblog</a></div>
    <div class="slug">the more I learn, the less I know</div>
  </div>
</div>
<div id="container_flooring">
  <div id="flooring">
    <div id="books">
      <img src="resources/images/books.png" width="330" height="298" usemap="#map_books" alt="about me" title="">
      <map name="map_books" id="map_books">
        <area shape="poly" coords="17,73,81,288,210,248,254,264,321,88,206,37,173,8,140,36" href="about" alt="about me" title="">
      </map>
    </div>
    <div id="camera">
      <img src="resources/images/camera.png" width="165" height="178" usemap="#map_camera" alt="photography">
      <map name="map_camera" id="map_camera">
        <area shape="poly" coords="10,24,34,100,29,133,39,165,157,125,143,77,126,66,111,75,106,92,98,93,93,87,97,75,75,2" href="photography.html" alt="photography" title="">
      </map>
    </div>
    <div id="macbook">
      <img src="resources/images/macbook.png" width="373" height="357" usemap="#map_macbook" alt="software projects">
      <map name="map_macbook" id="map_macbook">
        <area shape="poly" coords="49,5,55,98,9,279,273,346,318,167,374,86" href="software.html" alt="software projects" title="">
      </map>
    </div>
    <div id="iphone">
      <img src="resources/images/iphone.png" width="81" height="107" usemap="#map_iphone" alt="contact me">
      <map name="map_iphone" id="map_iphone">
        <area shape="poly" coords="7,83,37,2,79,17,50,99" href="contact.html" alt="contact me">
      </map>
    </div>
  </div>
</div>
<div id="container_stage">
    <div id="stage">
        <div id="content" class="hfeed">
              <div class="post hentry" id="post-1478">
                <div class="heading">
                    <div class="date">
                        <div class="day">10</div><div class="month">Mar</div>
                    </div>
                    <div class="title">
                        <h1 class="entry-title"><a href="/2012/should-static-methods-be-removed-from-php">Should statics be removed from PHP?</a></h1>
                        <small>
                        	posted <abbr class="published" title="2012-03-10T00:23:39+00:00">2012</abbr> // 
                        	<a href="category/code/java/index.html" title="View all posts in java" rel="category tag">java</a>, <a href="category/code/php/index.html" title="View all posts in php" rel="category tag">php</a> // <span class="comment"><a href="/2012/should-static-methods-be-removed-from-php#comments">1</a></span>
                        </small>
                    </div>
                </div>
                <div class="content entry-content">
                	<p>This might sound heavy handed and radical but it&#8217;s widely accepted, particularly among the testing community that <a href="https://www.google.co.uk/search?q=statics+evil">statics are evil</a>. Specifically I&#8217;m referring to static properties and methods, with exception to <code>self</code> for <a href="http://php.net/manual/en/language.oop5.late-static-bindings.php">late static binding</a> and <code>parent</code> used in <a href="http://php.net/manual/en/keyword.parent.php">inheritance</a>.</p>
<p>At first glance, statics are a convenience but as your code base grows, and especially if you try to write unit tests around your code, the convenience turns into pain. Why?<br />
<span id="more-1478"></span></p>
<ul>
<li>Static methods are anti-OOP and increase coupling</li>
<li>Static methods eliminate seams in your software</li>
<li>Statics are not required in PHP, we have global application state</li>
<li>Statics are the foundations for patterns prone to side effects</li>
</ul>
<p></p>
<h2>Convenience</h2>
<p>Some of these problems are not immediately apparent, a mind share of programmers will see static methods as call time convenience. Those that recognised these issues, steer clear of them. So essentially, they&#8217;re a &#8220;gotcha&#8221;.</p>
<p>PHP 5.4 has arrived with support for <a href="https://wiki.php.net/rfc/instance-method-call">instance method calls</a>, this means static call time convenience can be matched by instance methods.</p>
<pre class="prettyprint">
// static one liner
$user = User::load($userId);

// vs instance
$user = new User;
$user->load($userId);

// PHP 5.4
$user = new User()->load($userId);
</pre>
<p>However, inline instantiation isn&#8217;t buying you much here. I don&#8217;t advocate <a href="http://misko.hevery.com/2008/09/10/where-have-all-the-new-operators-gone/">sprinkling new throughout your code</a>. My example only serves to demonstrate how static calls can be replaced by equivalent one line instance method calls.</p>
<p>Lets describe each of the disadvantages above in more detail.</p>
<h2>Static methods are anti-OOP</h2>
<p>Hopefully this is pretty obvious. You are throwing away the power of object oriented programming and are left with namespaced functions.</p>
<pre class="prettyprint">
// static method
class User {
    public static function load($userId) { ... }
}

// namespaced function
namespace User;
function load($userId) { ... }

// usage comparison
User::load($userId);
\User\load($userId);
</pre>
<p>We&#8217;ve just <em>hard coded</em> a coupling to a specific implementation.</p>
<p>Can we make use of polymorphism here? <strong>No</strong><br />
Can we subclass User and use inheritance here <em>without changing the calling code</em>? <strong>No</strong><br />
Can we encapsulate some static but still globally accessible state? <strong>Yes</strong></p>
<p>Hooray, we&#8217;ve just reverted to procedural programming!</p>
<h2>Static methods eliminate seams in your software</h2>
<p>What&#8217;s a seam you might ask? A seam is where you&#8217;ve <em>decoupled</em> your code, and can substitute one implementation for another. Introducing seams in software is good design, they facilitate mocking / stubbing (crucial for unit tests).</p>
<p>Code with seams is less likely to need refactoring to accommodate change, as the collaborators are interchangeable. If it does require refactoring, less code will need to be modified in a decoupled system. Lets look at an example to help clarify this reasoning.</p>
<pre class="prettyprint">
class User {
    protected $id;
    protected $model;

    public function __construct(Model_User $model) {
        $this->model = $model;
    }

    public function getId() {
        return $this->id;
    }

    public function load($userId) {
        $data = $this->model->loadById($userId);

        if (empty($data)) {
            throw new UnexpectedValueException(
                'No user found with ID ' . $userId
            );
        }

        foreach ($data as $attr => $value) {
            $this->$attr = $value;
        }
    }
}
</pre>
<p>And the corresponding tests.</p>
<pre class="prettyprint">
class UserTest extends PHPUnit_Framework_TestCase {
    protected $userId = 1;
    protected $model;

    public function setup() {
        $this->model = $this->getMock(
            'Model_User', array('loadById'), new Zend_Test_DbAdapter
        );
    }

    public function testLoadUserIdOne() {
        $dbRow = array('id' => $this->userId);
        $this->model->expects('loadById')
                    ->with($this->userId)
                    ->will($this->returnValue($dbRow));

        $user = new User($this->model);
        $user->load($this->userId);
        $this->assertEquals($this->userId, $user->getId());
    }

    /**
     * @depends testLoadUserIdOne
     * @expectedException UnexpectedValueException
     */
    public function testLoadInvalidUserIdThrowsException() {
        $this->model->expects('loadById')
                    ->with($this->userId)
                    ->will($this->returnValue(array()));

        $user = new User($this->model);
        $user->load($this->userId);
    }
}
</pre>
<p>So this code is a little contrived (should User really know about it&#8217;s model?) but we can pull all the levers outside it to exercise all conditions, test for failure and success. It doesn&#8217;t require a database to run. Lets rework this to call static methods on <code>Model_User</code>.</p>
<pre class="prettyprint">
class User {
    protected $id;

    public function getId() {
        return $this->id;
    }

    public function load($userId) {
        $data = Model_User::loadById($userId);

        if (empty($data)) {
            throw new UnexpectedValueException(
                'No user found with ID ' . $userId
            );
        }

        foreach ($data as $attr => $value) {
            $this->$attr = $value;
        }
    }
}
</pre>
<p>This change looks harmless? Lets look at our tests &#8230;</p>
<pre class="prettyprint">
class UserTest extends PHPUnit_Framework_TestCase {
    protected $userId = 1;

    public function testLoadUserIdOne() {
        $user = new User;
        $user->load($this->userId); // ah, we need a DB server here :(
        $this->assertEquals($this->userId, $user->getId());
    }

    /**
     * @depends testLoadUserIdOne
     * @expectedException UnexpectedValueException
     */
    public function testLoadInvalidUserIdThrowsException() {
        $user = new User;
        $user->load($this->userId); // ah, we can't force a failure
    }
}
</pre>
<p>Aside from requiring a database server, we don&#8217;t have any handle on <code>Model_User</code> anymore. In a real application, I guarantee you&#8217;ll run into the situation where you won&#8217;t be able to induce failure and test error handling or a branch of an <code>if ... else</code> statement.</p>
<p>It&#8217;s unfair to lay blame solely on static methods. You can find yourself in this situation with instance methods, if you instantiate your collaborators within your class. But &#8230; using static methods <em>takes away the opportunity</em> to fix it by passing in collaborators!</p>
<p></p>
<h2>PHP has global application state</h2>
<p>The global application state / namespace in PHP is what makes the language initially accessible.</p>
<pre class="prettyprint">
&lt;?php

$msg = "I come from global state";
echo $msg;

function foo() {
    global $msg; // we all know this is bad
    ...
}

class Bar {
    public function baz() {
        global $msg; // this too
    }
}
</pre>
<p>We know the global namespace is not where you want to put your application code. Java has no global namespace <em>by design</em>. The entry point of a Java application:</p>
<pre class="prettyprint">
class MyApp {
    public static void main(String args[]) {
        String msg = "I come from main";
        System.out.println(msg);
    }
}
</pre>
<p>In Java, without going to disk or over the network, accessing global state is made possible via static properties and methods (but for the same reasons cited above they&#8217;re frowned upon). You can see from PHP 5 syntax, that it borrows heavily from Java but PHP doesn&#8217;t <em>need</em> statics for this purpose.</p>
<h2>Statics are the foundations for patterns prone to side effects</h2>
<p>The <a href="http://php.net/manual/en/language.oop5.patterns.php" title="Heed the warning!">Singleton</a> and <a href="http://www.brandonsavage.net/the-registry-pattern-reexamined/">Registry</a> patterns are only possible due to statics. They&#8217;re also considered <a href="http://www.youtube.com/watch?v=XcT4yYu_TTs">anti-patterns</a>.</p>
<blockquote><p>&#8230; if I instantiate two objects A and B, and I never pass a reference from A to B, then neither A nor B can get hold of the other or modify the other’s state. This is a very desirable property of code. If I don’t tell you about something, then it is not yours to interact with! Notice how this not the case with global variables or with Singletons. Object A could — unknown to developers — get hold of singleton C and modify it. If, when object B gets instantiated, it too grabs singleton C, then A and B can affect each other through C.</p>
<p><cite>Misko Hevery</cite></p></blockquote>
<p>In summary, fewer poor design choices would be available to developers if these features were stripped from PHP. What is the likelihood of this happening? Close to zero, certainly not before PHP 6 as this would break backwards compatibility. I hope from now on you, like me, avoid static properties and methods.</p>
                    <div class="g-plusone" data-size="medium"></div>
                        <a href="https://twitter.com/share?via=g4egk&amp;text=Should statics be removed from PHP?" class="twitter-share-button">Tweet</a>
                    <br>
                </div>
                <div id="previous"></div>
                <div id="next"></div>
                
                
  <div class="comments">
    <h3>comments</h3><a name="comments"></a>
      <div class="comment hcomment" id="comment-1757">
      <small class="poster vcard">
                  <a href="http://www.sirgroane.net" class="url fn" name="comment-1757" rel="external nofollow">Ian Rogers</a> //                 <abbr class="dtposted" title="2012-03-16T15:00:48+00:00">16.Mar.2012</abbr> // 15:00      </small>
      <div class="description">
        <p>Static methods are just namespaced procedures, as you rightly say. But you shouldn&#8217;t criticise them for that because, in fact, that&#8217;s *all* they&#8217;re good for :-)</p>
      </div>
    </div>
    	<div class="navigation">
		<div class="alignleft"></div>
		<div class="alignright"></div>
	</div>
</div>



              </div>
        </div>
    <div id="peripheral">
      <div id="blog_meta"></div>
      <div id="feeds">

      </div>
    </div>
    </div>
</div>
<script charset="utf-8" src="http://platform.twitter.com/widgets.js" type="text/javascript"></script>
<script type="text/javascript">
  window.___gcfg = {lang: 'en-GB'};

  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
<div id="container_footer">
    <div id="footer" class="vcard">
        <div class="who">
        	<h4>Who am I?</h4>
        	<p>My name is Greg &amp; this is my blog.
        	I'm a software engineer, amateur photographer, dad &amp; fulltime nerd.</p>
        	<p class="adr">I live in
        	<a href="http://maps.google.co.uk/maps/place?q=Hitchin" class="locality">Hitchin</a>, <abbr title="United Kingdom" class="country-name">England</abbr>. Once in a blue moon I write my thoughts on this blog.</p>
        </div>
        <div class="when">&nbsp;</div>
        <div class="where">
            <a href="http://github.com/gknapp" title="view my code" id="github"><span>My github projects</span></a>
            <a href="http://www.linkedin.com/in/g4egk" title="view my professional profile" id="linkedin" rel="me"><span>My Linkedin profile</span></a>
        </div>
        <div class="notice">
        	<strong>&copy; 2005-2014 <span class="fn n"><span class="given-name">Greg</span> <span class="family-name">Knapp</span></span>.</strong>
        	Views expressed here are my own and not necessarily those of my employer.
        </div>
        <div class="clear"><!-- for iPhone --></div>    </div>
</div>
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-1966441-2']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript">
  !window.jQuery && document.write(
  	unescape('%3Cscript src="http://static.gregk.me/js/jquery-1.4.2.min.js"%3E%3C/script%3E')
  )
</script>
<!--[if lt IE 7]>
<script type="text/javascript" src="http://static.gregk.me/js/jquery.ifixpng2.js"></script>
<script type="text/javascript">
  $.ifixpng('http://static.gregk.me/images/pixel.gif');
  $("#books img, #camera img, #macbook img, #iphone img").ifixpng();
</script>
<![endif]-->
<script type="text/javascript" src="http://static.gregk.me/js/min.110426.js"></script>
</body>
</html>
